export interface Table {
    name?: string;
    table_name: string;
    table_schema?: string;
}
export declare class TableData {
    tables: {
        [name: string]: any;
    };
    foreignKeys: {
        [name: string]: any;
    };
    hasTriggerTables: {
        [name: string]: boolean;
    };
    text?: {
        [name: string]: string;
    };
    constructor();
}
export declare function qNameSplit(qname: string): (string | null)[];
export declare type DialectName = 'mssql' | 'mysql' | 'mariadb' | 'postgres' | 'sqlite';
export declare type CaseOption = 'c' | 'l' | 'o' | 'p' | 'u';
export interface AutoOptions {
    additional: any;
    caseFile: CaseOption;
    caseModel: CaseOption;
    caseProp: CaseOption;
    closeConnectionAutomatically: boolean;
    dialect: DialectName;
    dialectOptions: {
        options: any;
    };
    directory: string;
    es6: boolean;
    esm: boolean;
    freezeTableName: boolean;
    indentation: number;
    noWrite: boolean;
    schema: string;
    skipTables: string[];
    spaces: boolean;
    storage: string;
    tables: string[];
    typescript: boolean;
}
/** Change casing of val string according to opt [c|l|o|p|u]  */
export declare function recase(opt: CaseOption, val: string | null): string;
